@using WebArsip.Mvc.Models.ViewModels
@model DocumentViewModel
@{
    ViewData["Title"] = "Edit Document Page";
    Layout = "_LayoutPrivate";
}

<h2>✏️ Edit Document</h2>

<form id="editDocForm" enctype="multipart/form-data">
    <input type="hidden" asp-for="DocId" />

    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <input asp-for="Title" class="form-control" required />
    </div>

    <div class="mb-3">
        <label for="Description" class="form-label">Description</label>
        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
    </div>

    <div class="mb-3">
        <label for="FileUpload" class="form-label">Replace File (Optional)</label>
        <input type="file" name="FileUpload" class="form-control" accept=".doc,.docx,.xls,.xlsx,.pdf" />
        @if (!string.IsNullOrEmpty(Model.FilePath))
        {
            <p class="mt-2">
                📄 Current File:
                <a href="@Url.Action("Download", "Document", new { id = Model.DocId })" target="_blank">
                    @Model.OriginalFileName
                </a>
            </p>
        }
    </div>

    <div class="progress mb-3" style="height: 25px; display: none;">
        <div id="uploadProgress" class="progress-bar progress-bar-striped progress-bar-animated"
             role="progressbar" style="width: 0%">
            0%
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label for="Status" class="form-label">Status</label>
            <select asp-for="Status" class="form-select">
                <option value="Draft" selected="@((Model.Status == "Draft").ToString())">Draft</option>
                <option value="Published" selected="@((Model.Status == "Published").ToString())">Published</option>
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label class="form-label">Version</label>
            @{
                var badgeClass = Model.Status switch
                {
                    "Published" => "bg-success",
                    "Updated" => "bg-warning text-dark",
                    "Draft" => "bg-secondary",
                    _ => "bg-info"
                };
            }
            <div class="form-control d-flex align-items-center" id="versionContainer">
                <span class="badge @badgeClass me-2 px-3 py-2" id="versionBadge" style="font-size: 0.9rem;">
                    @($"v{Model.Version}")
                </span>
                <span class="text-muted" id="versionLabel">
                    @(Model.Status == "Updated" ? "Revised version" :
                        Model.Status == "Published" ? "Official release" :
                        "Draft version")
                </span>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">💾 Update</button>
    <a asp-action="Index" class="btn btn-secondary">🔙 Back</a>
</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("editDocForm");
            const fileInput = form.querySelector("input[name='FileUpload']");
            const progressBarContainer = document.querySelector(".progress");
            const progressBar = document.getElementById("uploadProgress");
            const versionBadge = document.getElementById("versionBadge");
            const versionLabel = document.getElementById("versionLabel");
            const allowedExts = [".doc", ".docx", ".xls", ".xlsx", ".pdf", ".PDF"];

            fileInput.addEventListener("change", function () {
                const fileName = this.files[0]?.name || "";
                const ext = fileName.substring(fileName.lastIndexOf(".")).toLowerCase();

                if (!allowedExts.includes(ext)) {
                    Swal.fire({
                        icon: "error",
                        title: "File tidak valid!",
                        text: "Hanya file Word, Excel, atau PDF yang diperbolehkan.",
                        confirmButtonColor: "#d33"
                    });
                    this.value = "";
                    return;
                }
            });

            form.addEventListener("submit", async function (e) {
                e.preventDefault();

                const formData = new FormData(form);

                progressBarContainer.style.display = "block";
                progressBar.style.width = "0%";
                progressBar.textContent = "0%";

                const xhr = new XMLHttpRequest();
                xhr.open("POST", "/Document/Edit", true);

                xhr.upload.addEventListener("progress", function (e) {
                    if (e.lengthComputable) {
                        const percent = Math.round((e.loaded / e.total) * 100);
                        progressBar.style.width = percent + "%";
                        progressBar.textContent = percent + "%";
                    }
                });

                xhr.onload = function () {
                    progressBarContainer.style.display = "none";
                    if (xhr.status === 200 || xhr.status === 302) {
                        let currentVer = parseInt(versionBadge.innerText.replace("v", "")) || 1;
                        currentVer++;

                        versionBadge.innerText = "v" + currentVer;
                        versionBadge.className = "badge bg-warning text-dark me-2 px-3 py-2";
                        versionLabel.innerText = "Revised version";

                        Swal.fire({
                            icon: "success",
                            title: "File berhasil diupdate ke v" + currentVer +"",
                            text: "Dokumen telah diperbarui.",
                            timer: 2000,
                            showConfirmButton: false
                        }). then(() => {
                            window.location.href = "/Document/Index";
                        });

                    } else {
                        Swal.fire({ icon: "error", title: "Gagal", text: "Gagal memperbarui dokumen." });
                    }
                };

                xhr.onerror = function () {
                    progressBarContainer.style.display = "none";
                    Swal.fire({ icon: "error", title: "Error", text: "Terjadi kesalahan jaringan." });
                };

                xhr.send(formData);
            });
        });
    </script>
}